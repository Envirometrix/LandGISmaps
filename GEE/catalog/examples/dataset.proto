// Earth Engine dataset descriptions. See go/eedatapush

syntax = "proto3";

option cc_api_version = 2;
option java_api_version = 2;

package gestalt.dataset;

// Type of non-spatial properties.
enum PropertyType {
  PROPERTY_TYPE_UNSPECIFIED = 0;
  STRING = 1;
  INT = 2;
  DOUBLE = 3;
  STRING_LIST = 4;
  INT_LIST = 5;
  DOUBLE_LIST = 6;
}

// A single value of a non-spatial property.
message PropertyValue {
  string value = 1;
  string description = 2;
}


// A non-spatial property.
message Property {
  string name = 1;
  string description = 2;
  PropertyType type = 3;
  repeated PropertyValue values = 4;
  // Human-readable name for physical units. Use ^ for superscripts (eg, m^2).
  string units = 5;
  // Min and max values as given by the data provider.
  double provider_min_value = 6;
  double provider_max_value = 7;
  // If provider did not specify exact min/max values, we may supply
  // an estimate.
  double estimated_min_value = 8;
  double estimated_max_value = 9;
}

// Spatial coverage type.
enum ExtentType {
  EXTENT_TYPE_UNSPECIFIED = 0;
  GLOBAL = 1;
  // ALMOST_GLOBAL, like srtm?
  CONTINENT = 2;
  COUNTRY = 3;
  CUSTOM_EXTENT = 4;
}

// Bounding box in degrees.
message BoundingBox {
  double north = 1;
  double south = 2;
  double east = 3;
  double west = 4;
}

// Spatial coverage of an image, image collection or a vector.
message Coverage {
  ExtentType extent = 1;
  // Names of continents, ISO code(s) for countries
  repeated string coverage_areas = 2;
  BoundingBox bounding_box = 3;
}

// For metadata on classified raster bands only
message CategoricalValue {
  // A single raster band value.
  int32 value = 1;
  // Color to be used for this value.
  string color = 2;
  // Text description of the landcover class (eg, "wheat").
  string description = 3;
}

// Type of units of raster resolution.
enum PixelUnit {
  PIXEL_UNIT_UNSPECIFIED = 0;
  METERS = 1;
  ARC_DEGREES = 2;
  ARC_MINUTES = 3;
  ARC_SECONDS = 4;
}

// Raster resolution (eg, 30 meters or 0.1 degree).
message Resolution {
  PixelUnit units = 1;
  double amount = 2;
}

message BitmaskValue {
  int32 value = 1;
  string description = 2;
  // This should be set to true for one out of two values for bit flags only.
  bool is_yes = 3;
}

message BitmaskPart {
  string description = 1; // Meaning of the bit pattern.
  int32 first_bit = 2; // 0-based index of the lowest bit
  int32 bit_count = 3; // Number of bits in the pattern
  repeated BitmaskValue values = 4; // Explanation for possible bit values.
}

message Bitmask {
  repeated BitmaskPart bitmask_parts = 1;
  int32 total_bit_count = 2;
}

// One raster band.
message Band {
  string id = 1;
  // Text description. If formatting is needed, use markdown
  // (https://en.wikipedia.org/wiki/Markdown)
  string description = 2;
  // Human-readable name for physical units. Use ^ for superscripts
  // (eg, m^2).
  string units = 3;
  // Scale (gain) and offset(bias) to apply to pixel values to obtain
  // physical values. Eg, temp C = value / 1000 + 273.
  // Here scale = 0.001, offset = 273.
  // TODO(simonf): we want the default of 1, but defaults are not allowed
  // in proto 3.
  double scale = 4;
  double offset = 5;
  repeated CategoricalValue classes = 6;
  // Resolution of the band.
  Resolution x_resolution = 7;
  Resolution y_resolution = 8;
  // Wavelength or wavelength range for the underlying observational band,
  // if applicable. Examples:
  // "0.43 - 0.45 Âµm"
  // "5.405 GHz (C-Band)"
  // "2506.4800 nm"
  string wavelength = 9;
  Bitmask bitmask = 10;
  // For collections: whether this band can be missing in some assets.
  bool optional = 11;
  // Min and max values in this band as given by the data provider.
  double provider_min_value = 12;
  double provider_max_value = 13;
  // If provider did not specify exact min/max values, we may supply
  // an estimate.
  double estimated_min_value = 14;
  double estimated_max_value = 15;
}

// Time units to be used for collection periodicity.
enum TimeUnit {
  TIME_UNIT_UNSPECIFIED = 0;
  SECOND = 1;
  MINUTE = 2;
  HOUR = 3;
  DAY = 4;
  WEEK = 5;
  MONTH = 6;
  YEAR = 7;
  CUSTOM_TIME_UNIT = 8;
  // Monthly climatology means a collection with 12 images
  // where each image represents climatology (typical) values
  // for that month.
  MONTHLY_CLIMATOLOGY = 9;
}

// Temporal cadence (repeat period) for periodic collections.
message Cadence {
  TimeUnit unit = 1;
  int32 interval = 2;
  // Human-readable description of a custom cadence - eg, irregular pentads
  string description = 3;
}

// Organization that provides the dataset.
message Provider {
  string name = 1;
  // Link to the main web page about the dataset.
  string link = 2;
  // Link to the location(s) from which files are downloaded.
  repeated string file_links = 3;
  // Name of the observation platform(s): satellite, aircraft etc.
  repeated string platforms = 4;
  // Name of the instrument(s) providing data - eg, OLI and TIRS on L8.
  repeated string instruments = 5;
}

message BandVisualization {
  // EE visual parameters support displaying up to 3 bands at a time, each
  // with either 1 parameter or the same number of parameters as
  // bands. e.g: {bands:['B1', 'B2'], min:0, max:[100, 200]} is a valid
  // visParam.  NOTE: palette can be displayed only if one band is present.
  repeated double min = 1;
  repeated double max = 2;
  repeated double gamma = 3;
  // TODO(simonf): we want the default of 1, but defaults are not allowed
  // in proto3.
  repeated double gain = 4;
  repeated double bias = 5;
  // hex color codes or CSS color identifiers
  repeated string palette = 6;
  repeated string band_names = 7;
}

// Dataset visualization parameters for raster data
message ImageVisualization {
  // Vis args for the given band_names
  BandVisualization band_vis = 2;
  // If vis_args are present here, they apply to all bands.
  BandVisualization global_vis = 3;
}

message PolygonVisualization {
  // To visualize FeatureCollections with polygons, use
  // polygon_property_name to select the column to visualize...
  string property_name = 1;

  // ... and a BandVisualization to apply to the resulting image.
  BandVisualization property_vis = 2;
}

message TableVisualization {
  // Property name to select, not required.
  string property_name = 1;

  // Parameters from java/com/google/earthengine/lib/image/SimpleStyle.java
  // Name of a color or an RRGGBB hex color code.
  // Supports opacity (e.g.: 'FF000088' for 50% transparent red).
  string color = 2;

  // The default size in pixels of the point markers.
  int32 point_size = 3; // default = 3

  // The default shape of the marker to draw at each point location.  One of:
  // circle, square, diamond, cross, plus, pentagram, hexagram, triangle,
  // triangle_up, triangle_down, triangle_left, triangle_right, pentagon,
  // hexagon, star5, star6.
  // This argument also supports the following Matlab marker abbreviations:
  // o, s, d, x, +, p, h, ^, v, <, >.
  string point_shape = 4; // default = "circle"

  // The default line width for lines and outlines for polygon/point shapes.
  double width = 5;  // default = 2

  // The color for filling polygons and point shapes.  Defaults to 'color' at
  // opacity 0.66.
  string fill_color = 6;

  // Unused for now: styleProperty, neighborhood.
  // End of parameters from java/com/google/earthengine/lib/image/SimpleStyle.java
}

message Visualization {
  // Name of the displayed visualization.
  string display_name = 1;
  oneof vis {
    ImageVisualization image_visualization = 16;
    TableVisualization table_visualization = 17;
    PolygonVisualization polygon_visualization = 18;
  }
}

// Metadata for a specific dataset.
message Dataset {
  // Version string in the provider .format
  string version = 1;
  // Short title. If the dataset is commonly known by an acronym, the title
  // should start with it and expand it afterwards:
  // Eg: "TRMM: Tropical Rainfall Measuring Mission"
  string title = 2;
  // Text description. If formatting is needed, use markdown
  // (https://en.wikipedia.org/wiki/Markdown)
  string description = 3;
  // Details of post-processing done at Google, if any.
  string google_processing = 4;
  // Verbatim copy of the provider's terms of use.
  string terms_of_use = 5;
  // The dataset's doi(s), if given. See
  // https://en.wikipedia.org/wiki/Digital_object_identifier
  repeated string dois = 6;
  // A field for license?
  // Provider's requested citation string(s), if given.
  repeated string citations = 7;
  repeated Provider providers = 8;
  Coverage coverage = 9;
  // URL of the thumbnail to use in the preview.
  string thumbnail_url = 10;
  // One or more JS examples
  repeated string example_code = 11;
  // Link to dataset-specific EE documentation, if any.
  string ee_doc_url = 12;
  // Tags to be searched on (no spaces).
  // Source tags describe the provider (eg, 'nasa').
  repeated string source_tags = 13;
  // Product tags describe the product characteristics (eg, 'climate')
  repeated string product_tags = 14;
  string start = 15; // ISO 8601 string
  string end = 16; // ISO 8601 string
  // JS visualization parameters.
  repeated Visualization visualizations = 17;
  // Footnotes, if any.
  string footer = 18;
  // Whether the data have been uploaded by an external user
  // (we need to skip integration tests for such assets, as
  // the Colossus files won't be readable by gestalt-testing).
  bool user_uploaded = 19;
  // Whether the dataset should be omitted from the public index.
  // Useful for publishing drafts.
  bool skip_indexing = 20;
  // ID of the asset superseding this one, if any.
  string superseded_by = 21;
}

message Template {
  // Arbitrary human-readable string used in error messages during parsing.
  string name = 1;
  repeated string child_asset_ids = 2;
  oneof template {
    Image image_template = 3;
    ImageCollection image_collection_template = 4;
    Table table_template = 5;
  }
}

// A folder with several assets of potentially different structure.
// For child assets, all or some of their Dataset properties can be unset,
// in which case the parent folder property is inherited.
message Folder {
  // Common fields for child datasets can be specified in the *_template
  // fields.
  repeated Template templates = 1;
}


// A single image (raster).
message Image {
  repeated Band bands = 1;
  // Names, types and possible values of image metadata.
  repeated Property properties = 2;
  // If resolution values are present here, they apply to all bands.
  Resolution x_resolution = 3;
  Resolution y_resolution = 4;
}

message ImageCollection {
  repeated Band bands = 1;
  // Names, type and values of collection asset properties.
  repeated Property properties = 2;
  // Names, types and possible values of image metadata.
  repeated Property schema = 3;
  Cadence cadence = 4;  // For truly periodic collections
  Cadence revisit_interval = 5; // For Landsat/Sentinel-style collections
  // True if end date should be set from the most recent asset.
  bool ongoing = 6;
  // If present, go back X days before looking for the last asset.
  // If ongoing=true and days_lag is not set, dataset end date will be set from
  // the last asset's date, which is ok for small collections. If days_lag
  // is set, we go back one day at a time looking for the most recent asset
  // starting from today-days_lag
  int32 days_lag = 7;
  // The zoom level below which the collection will not be shown in the
  // Explorer.
  int32 min_zoom_level = 8;
  // If resolution values are present here, they apply to all bands
  // in each asset.
  Resolution x_resolution = 9;
  Resolution y_resolution = 10;
  // If true, use start times for each scene to create a time mapping
  // used in Explorer.
  bool time_mapping_from_scenes = 11;
  // Whether to extend the dataset end forward to the next period boundary.
  // Needed for creating one more period, as Code Editor treats the period end
  // as an exclusive boundary.
  bool extend_end = 12;
}

// A vector table.
message Table {
  // Names, type and values of table asset properties.
  repeated Property properties = 1;
  // Names, types and possible values of non-spatial feature properties.
  repeated Property schema = 2;
}

// Top-level object.
message DatasetDescription {
  string id = 1;
  Dataset dataset = 2;
  oneof asset {
    Image image = 3;
    ImageCollection image_collection = 4;
    Table table = 5;
    Folder folder = 6;
  }
  // Whether the text fileds have been converted from markdown to HTML
  bool has_html = 7;
}
